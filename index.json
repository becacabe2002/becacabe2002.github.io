[{"content":"Clustered index Store the records in an ordered structure based on its key value\nEach table just have one clustered index (because the data can only be arranged in one order), and a table with clustered index is called clustered table\nData in clustered index are organized like B-tree\nThe root node and the intermediate node contain index pages for storing the indexes of the records The leaf node contains the data pages of the table Pages within each level of the index are linked in a double linked list structure In SQL Server When creating the table with the Primary Key (PK), SQL Server automatically creates a clustered index on the PK columns.\nWhen user add the PK to a table which has a clustered index, SQL Server will force the PK to use non-clustered index\nSyntax --- create clustered index (table doesn\u0026#39;t have PK) CREATE CLUSTERED INDEX index_name ON schema_name.table_name (column_list); --- query SELECT column_name FROM table_name WHERE condition Non-clustered index Different from clusterd index: sorts and stores data separately from records in the table\nData is copied from selected columns from a linked table.\nOrganize data in Btree structure\nA table can have one or more non-clustered indexes. Each non-clustered index can consist of one or more table columns.\nApart from storing the index key values, the leaf nodes also store pointers to the records containing the key values (also called row locators) Syntax --- create non-clustered index CREATE [NON-CLUSTERED] INDEX index_name ON table_name(column_list); Other stuffs Rename index in SQL Server Use sp_rename Stored Procedure EXEC sp_rename index_name, new_index_name, N\u0026#39;INDEX\u0026#39;; --- or EXEC sp_rename @objname = N\u0026#39;index_name\u0026#39;, @newname = N\u0026#39;new_index_name\u0026#39;, @objtype = N\u0026#39;INDEX\u0026#39;; Unique index Can be one or more columns.\nCan be clustered or non-clustered\n--- create unique index CREATE UNIQUE INDEX index_name ON table_name(column_list); Disable indexing in SQL Server Disabling the index speed up updating process on a table\nALTER INDEX index_name ON table_name DISABLE; Disable all indexes\nALTER INDEX ALL ON table_name DISABLE; If an index is disabled, the optimizer will not use that index to plan the query execution\nSQL Server retains index definition in metadata and index statistics in non-clustered indexes.\nBut when users disable index on view, SQL Server will delete all index data\nIf a clustered index of a table is disabled, the data of the table cann\u0026rsquo;t be accessed using SELECT, INSERT, UPDATE and DELETE until the clustered index is rebuilt/delete.\nEnable indexes in SQL Server It needs to be rebuilt to reflect new data in the table. --- alter index/create index ALTER INDEX index_name ON table_name REBUILD; CREATE INDEX index_name ON table_name(column_list) WITH(DROP_EXISTING=ON) -- it drop the index first, then rebuilt it ALTER INDEX ALL ON table_name REBUILD; -- DBCC DBREINEX DBCC DBREINDEX (table_name, index_name); Delete indexes in SQL Server DROP INDEX [IF EXISTS] index_name ON table_name -- for dropping multiple indexes from one/multiple tables DROP INDEX [IF EXISTS] index_name1 ON table_name 1, index_name2 ON table_name 2, ...; ⚠️ It can\u0026rsquo;t delete indexes create by PK or UNIQUE CONSTRAINT (use ALTER TABLE DROP CONSTRAINT instead)\nFiltered index in SQL Server is a non-clustered index with an expression that specifies which records should be added to the index CREATE INDEX index_name ON table_name(column_list) WHERE predicate Example\nSELECT SUM(CASE WHEN phone IS NULL THEN 1 ELSE 0 END) AS [Has Phone], SUM(CASE WHEN phone IS NULL THEN 0 ELSE 1 END) AS [No Phone] FROM sales.customers; CREATE INDEX ix_cust_phone ON sales.customers(phone) INCLUDE (first_name, last_name) WHERE phone IS NOT NULL; ","permalink":"https://becacabe2002.github.io/blogs/database-index-p2/","summary":"Continue of part 1, we gonna learn about Clustered/Non-clustered Index.","title":"Database Index (Part 2) - Clustered/Non-clustered"},{"content":"I. What is Index? A data structure is used to locate and fast access data in tables or views\nHelp reducing the amount of access to memory during query execution -\u0026gt; Increase database query performance.\nTwo types of indexes: Clustered Non-clustered II. What is the index database used for? Example:\nselect * from table_name where column_name = val If there is no index for the column_name column, the system will scan all the rows of the table_name table to search for the row that satisfies condition column_name = val\nAn index points to the address of data in a table (like table of contents in a book)\nIndexes can be created for one or more columns in a table.\nCreate by default for primary keys, foreign keys It is possible to create additional indexes for columns if needed III. The structure of the index Search Key: contains a copy of the indexed column\u0026rsquo;s values Data Reference: contains the pointer to the address of the record with the corresponding index column value IV. Types of indexes B-tree The default index type graph TD 20,40 --\u003e 10; 10 --\u003e 5; 10--\u003e15 20,40 --\u003e 30,33; 30,33 --\u003e 25,28; 30,33 --\u003e 31; 30,33 --\u003e 35 20,40 --\u003e 50,60; 50,60 --\u003e 45; 50,60 --\u003e 55; 50,60 --\u003e 65\rFeatures:\nIndex data is organized and stored in the form of tree (root, branch, leaf)\nThe values of nodes increase from left to right\nThe B-tree index is used in comparision expressions: =, \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;=, BETWEEN, LIKE -\u0026gt; Good for ORDER BY statement\nWhen searching for the node, it starts from the root node, and then comes to the branch and leaf, until all satisfied data are found.\nSyntax\n--- create index CREATE INDEX id_index ON table_name (column_name [, column_name…]) USING BTREE; ALTER TABLE table_name ADD INDEX id_index (column_name [, column_name…]) --- delete index DROP INDEX index_name ON table_name For more details, visit here\nHash Based on Hash function algorithm. Corresponding to each block of data, index will generate a bucket key (also called hash value) to distinguish. Features:\nHash index should be used only in = and \u0026lt;\u0026gt; (not equal to operator). (Don\u0026rsquo;t use for operators to find a range of values, like \u0026gt; or \u0026lt;) The ORDER BY is not optimized when using Hash index. (can\u0026rsquo;t find the next element in the order) Hash is faster than B-tree Syntax\n--- create index CREATE INDEX id_index ON table_name(column_name [, column_name…]) USING HASH; ALTER TABLE table_name ADD INDEX id_index(column_name [, column_name…]) USING HASH; For more details about Hash index, visit here\nStorage Engine When choosing the index type, it also depends on whether or not the Storage Engine supports the type of index. Storage Engine Supported Index Types InnoDB Btree MyISAM Btree MEMORY/HEAP Hash, Btree NDB Hash, Btree V. How to use index database effectively? SHOULD INDEX:\nThe columns used in WHERE,JOIN,ORDER BY SHOULDN\u0026rsquo;T INDEX:\nSmall tables, containing little data Tables are updated and inserted data regularly Columns contain so many NULL values Columns are regularly updated ⚠️ Downside of indexing is that it takes up more memory to store.\n","permalink":"https://becacabe2002.github.io/blogs/database-index-p1/","summary":"Introduction to Indexing SQL database","title":"Database Index (Part 1)"},{"content":"1. Indexing Index is a data structure which is used to locate and fast access data in tables or views\nIndexing helps reducing the amount of access to memory during query execution by establishing organized structures, adding db engine in promptly identifying rows that meet specified conditions in where clause. Although indexing boosts the perfomance of queries, it will be a trade off for the write operations. So it ","permalink":"https://becacabe2002.github.io/blogs/6-database-optimization-techniques/","summary":"\u003c!-- raw HTML omitted --\u003e\n","title":"6 Database Optimization Techniques"},{"content":"This is the first post ever posted in this blog.\nThis blog is only used for personal note-taking and non-commercial knowledge sharing.\n","permalink":"https://becacabe2002.github.io/blogs/first-post/","summary":"Not thing much, just a few thoughts.","title":"First Post"}]